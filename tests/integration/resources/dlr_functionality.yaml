tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - ../../../plugin.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-vsphere-plugin/2.3.0-m1/plugin.yaml

inputs:

  node_name_prefix:
    type: string
    description: >
       Node name prefix
    default: platform_test_

  nsx_ip:
    type: string
    description: >
       nsx server ip
    default: 127.0.0.1

  nsx_user:
    type: string
    description: >
       nsx server user
    default: nsx

  nsx_password:
    type: string
    description: >
       nsx server user password
    default: nsx

  nsx_raml:
    type: string
    description: >
       raml file path
    default: ""

  vcenter_ip:
    type: string
    description: >
       vcenter server ip
    default: 127.0.0.1

  vcenter_user:
    type: string
    description: >
       vcenter server user
    default: nsx

  vcenter_password:
    type: string
    description: >
       vcenter server user password
    default: nsx

  vcenter_cluster:
    type: string
    description: >
       vcenter cluster to deploy ESG node on
    default: Cluster

  vcenter_datastore:
    type: string
    description: >
       vcenter datastore
    default: datastore1

  vcenter_datacenter:
    type: string
    description: >
       vcenter datacenter
    default: Datacenter

  vcenter_resource_pool:
    description: >
      Resource pool name
    default: Resources

  template_name:
    description: >
      Template to clone VMs from
    default: CentOS-7.2-x86_64-1511-tmpl

node_types:
  connection_configuration:
     derived_from: cloudify.nodes.Root
     properties:
       connection_config: {}

node_templates:
  connection_configuration:
    type: connection_configuration
    properties:
      connection_config:
        username: { get_input: vcenter_user }
        password: { get_input: vcenter_password }
        host: { get_input: vcenter_ip }
        port: 443
        datacenter_name: { get_input: vcenter_datacenter }
        resource_pool_name: { get_input: vcenter_resource_pool }
        auto_placement: true

  datacenter:
    type: cloudify.vsphere.nodes.Datacenter
    properties:
      use_existing_resource: true
      name: { get_input: vcenter_datacenter }
      connection_config: { get_property: [connection_configuration, connection_config] }

  datastore:
    type: cloudify.vsphere.nodes.Datastore
    properties:
      use_existing_resource: true
      name: { get_input: vcenter_datastore }
      connection_config: { get_property: [connection_configuration, connection_config] }

  cluster:
    type: cloudify.vsphere.nodes.Cluster
    properties:
      use_existing_resource: true
      name: { get_input: vcenter_cluster }
      connection_config: { get_property: [connection_configuration, connection_config] }

  master_lswith:
    type: cloudify.nsx.lswitch
    properties:
      nsx_auth: &nsx_auth
        username: { get_input: nsx_user }
        password: { get_input: nsx_password }
        host: { get_input: nsx_ip }
        raml: { get_input: nsx_raml }
      switch:
        name: {concat:[{get_input: node_name_prefix}, master_swith]}
        transport_zone: Main_Zone
        # UNICAST_MODE, MULTYCAST_MODE, HYBRID_MODE
        mode: UNICAST_MODE

  slave_lswith:
    type: cloudify.nsx.lswitch
    properties:
      nsx_auth: *nsx_auth
      switch:
        name: {concat:[{get_input: node_name_prefix}, slave_swith]}
        transport_zone: Main_Zone
        # UNICAST_MODE, MULTYCAST_MODE, HYBRID_MODE
        mode: UNICAST_MODE

  nsx_dlr:
    type: cloudify.nsx.dlr
    properties:
      nsx_auth: *nsx_auth
      router:
        name: {concat:[{get_input: node_name_prefix}, some_router]}
        dlr_pwd: SeCrEt010203!
        # compact, large, quadlarge, xlarge
        dlr_size: compact
      firewall:
        # accept or deny
        action: accept
        # true or false
        logging: false
      dhcp:
        enabled: true
        syslog_enabled: false
        syslog_level: INFO
      routing:
        enabled: true
        routingGlobalConfig:
          routerId: 192.168.1.11
          logging:
            logLevel: info
            enable: false
          ecmp: false
        staticRouting:
          defaultRoute:
            # some address, will be replaced by default gateway
            gatewayAddress: 192.168.1.43
      ospf:
        enabled: true
        protocolAddress: 192.168.1.44
        forwardingAddress: 192.168.1.11
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            router:
              ha_ls_id: { get_attribute: [ master_lswith, resource_id ] }
              uplink_ls_id: { get_attribute: [ master_lswith, resource_id ] }
              uplink_ip: 192.168.1.11
              uplink_subnet: 255.255.255.0
              uplink_dgw: 192.168.1.1
    relationships:
      - type: cloudify.relationships.connected_to
        target: master_lswith
      - type: cloudify.nsx.relationships.deployed_on_datacenter
        target: datacenter
      - type: cloudify.nsx.relationships.deployed_on_datastore
        target: datastore
      - type: cloudify.nsx.relationships.deployed_on_cluster
        target: cluster

  interface:
    type: cloudify.nsx.dlr_interface
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            interface:
              dlr_id: { get_attribute: [ nsx_dlr, resource_id ] }
              interface_ls_id: { get_attribute: [ slave_lswith, resource_id ] }
              interface_ip: 192.168.2.11
              interface_subnet: 255.255.255.0
              name: {concat:[{get_input: node_name_prefix}, router_interface]}
    relationships:
      - type: cloudify.relationships.contained_in
        target: nsx_dlr
      - type: cloudify.relationships.connected_to
        target: slave_lswith

  ospf_areas:
    type: cloudify.nsx.ospf_areas
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            area:
              dlr_id: { get_attribute: [ nsx_dlr, resource_id ] }
              areaId: 1000
              type: nssa
              authentication:
                type: none
    relationships:
      - type: cloudify.relationships.contained_in
        target: nsx_dlr
      - type: cloudify.relationships.connected_to
        target: interface

  ospf_interface:
    type: cloudify.nsx.ospf_interfaces
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            interface:
              dlr_id: { get_attribute: [ nsx_dlr, resource_id ] }
              vnic: { get_attribute: [ nsx_dlr, router, uplink_vnic ] }
              areaId: { get_attribute: [ ospf_areas, area, areaId ] }
              helloInterval: 10
              priority: 128
              cost: 1
              deadInterval: 40
              mtuIgnore: false
    relationships:
      - type: cloudify.relationships.connected_to
        target: ospf_areas
      - type: cloudify.relationships.connected_to
        target: interface
      - type: cloudify.relationships.contained_in
        target: nsx_dlr

  dlr_static_gateway:
    type: cloudify.nsx.dlr_dgw
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            gateway:
              dlr_id: { get_attribute: [ nsx_dlr, resource_id ] }
              address: 192.168.1.12
    relationships:
      - type: cloudify.relationships.contained_in
        target: nsx_dlr

  dhcp_relay:
    type: cloudify.nsx.dlr_dhcp_relay
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            relay:
              dlr_id: { get_attribute: [ nsx_dlr, resource_id ] }
              relayServer:
                ipAddress: 8.8.8.8
              relayAgents:
                relayAgent:
                  vnicIndex: { get_attribute: [ interface, ifindex ] }
                  giAddress: { get_attribute: [ interface, interface, interface_ip ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: nsx_dlr
      - type: cloudify.relationships.connected_to
        target: interface

  testserver:
    type: cloudify.vsphere.nodes.Server
    properties:
      install_agent: false
      server:
        name: {concat:[{get_input: node_name_prefix}, connecttonsxnet]}
        template: { get_input: template_name }
        cpus: 1
        memory: 2048
      connection_config: { get_property: [connection_configuration, connection_config] }
      networking:
        connect_networks:
          - name: slave_lswith
            from_relationship: true
            switch_distributed: true
    relationships:
      - target: slave_lswith
        type: cloudify.relationships.connected_to
