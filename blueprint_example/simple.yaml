tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
#  - https://raw.githubusercontent.com/Cloudify-PS/cloudify-nsx-plugin/master/plugin.yaml
  - ../plugin.yaml

inputs:

  nsx_ip:
    type: string
    description: >
       nsx server ip
    default: 127.0.0.1

  nsx_user:
    type: string
    description: >
       nsx server user
    default: nsx

  nsx_password:
    type: string
    description: >
       nsx server user password
    default: nsx

  nsx_raml:
    type: string
    description: >
       raml file path
    default: https://raw.githubusercontent.com/vmware/pynsxv/master/pynsxv/library/api_spec/nsxvapi.raml

  vcenter_ip:
    type: string
    description: >
       vcenter server ip
    default: 127.0.0.1

  vcenter_user:
    type: string
    description: >
       vcenter server user
    default: nsx

  vcenter_password:
    type: string
    description: >
       vcenter server user password
    default: nsx

node_templates:

  nsx_lswith:
    type: cloudify.nsx.lswitch
    properties:
      nsx_auth: &nsx_auth
        username: { get_input: nsx_user }
        password: { get_input: nsx_password }
        host: { get_input: nsx_ip }
        raml: { get_input: nsx_raml }
      switch:
        name: master_swith_name
        transport_zone: Main_Zone
        # UNICAST_MODE, MULTYCAST_MODE, HYBRID_MODE
        mode: UNICAST_MODE

  vresourcepool:
    type: cloudify.vcenter.resource_pool
    properties:
      vcenter_auth: &vcenter_auth
        username: { get_input: vcenter_user }
        password: { get_input: vcenter_password }
        host: { get_input: vcenter_ip }
      resource_pool:
        name: Cluster
        use_external_resource: True

  datastore:
    type: cloudify.vcenter.datastore
    properties:
      vcenter_auth: *vcenter_auth
      datastore:
        name: datastore1
        use_external_resource: True

  datacenter:
    type: cloudify.vcenter.datacenter
    properties:
      vcenter_auth: *vcenter_auth
      datacenter:
        name: Datacenter
        use_external_resource: True

  esg:
    type: cloudify.nsx.esg
    properties:
      nsx_auth: *nsx_auth
      edge:
        name: real_edge
        esg_pwd: SeCrEt010203!
        # compact, large, quadlarge, xlarge
        esg_size: compact
        esg_username: admin
        esg_remote_access: True
      firewall:
        # accept or deny
        action: accept
        # true or false
        logging: false
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            edge:
              datacentermoid: { get_attribute: [ datacenter, resource_id ] }
              datastoremoid: { get_attribute: [ datastore, resource_id ] }
              resourcepoolid: { get_attribute: [ vresourcepool, resource_id ] }
              default_pg: { get_attribute: [ nsx_lswith, resource_dvportgroup_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: nsx_lswith

  slave_lswith:
    type: cloudify.nsx.lswitch
    properties:
      nsx_auth: *nsx_auth
      switch:
        name: slave_swith_name
        transport_zone: Main_Zone
        # UNICAST_MODE, MULTYCAST_MODE, HYBRID_MODE
        mode: UNICAST_MODE

  esg_interface:
    type: cloudify.nsx.esg_interface
    properties:
      nsx_auth: *nsx_auth
      interface:
        ifindex: 3
        ipaddr: 192.168.3.1
        netmask: 255.255.255.0
        prefixlen: 24
        name: interface_name
        mtu: 1500
        is_connected: "true"
        vnic_type: internal
        enable_send_redirects: "true"
        enable_proxy_arp: "true"
        secondary_ips: 192.168.3.128
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            interface:
              esg_name: { get_attribute: [ esg, edge, name ] }
              portgroup_id: { get_attribute: [ slave_lswith, resource_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: esg
      - type: cloudify.relationships.depends_on
        target: slave_lswith
