tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
#  - https://raw.githubusercontent.com/Cloudify-PS/cloudify-nsx-plugin/master/plugin.yaml
  - ../plugin.yaml

inputs:

  nsx_ip:
    type: string
    description: >
       nsx server ip
    default: 127.0.0.1

  nsx_user:
    type: string
    description: >
       nsx server user
    default: nsx

  nsx_password:
    type: string
    description: >
       nsx server user password
    default: nsx

  nsx_raml:
    type: string
    description: >
       raml file path
    default: ""

  vcenter_ip:
    type: string
    description: >
       vcenter server ip
    default: 127.0.0.1

  vcenter_user:
    type: string
    description: >
       vcenter server user
    default: nsx

  vcenter_password:
    type: string
    description: >
       vcenter server user password
    default: nsx

  vcenter_vresourcepool:
    type: string
    description: >
       vcenter resourcepool
    default: Cluster

  vcenter_datastore:
    type: string
    description: >
       vcenter datastore
    default: datastore1

  vcenter_datacenter:
    type: string
    description: >
       vcenter datacenter
    default: Datacenter

node_templates:

  master_lswith:
    type: cloudify.nsx.lswitch
    properties:
      nsx_auth: &nsx_auth
        username: { get_input: nsx_user }
        password: { get_input: nsx_password }
        host: { get_input: nsx_ip }
        raml: { get_input: nsx_raml }
      switch:
        name: platform_test_master_swith_name
        transport_zone: Main_Zone
        # UNICAST_MODE, MULTYCAST_MODE, HYBRID_MODE
        mode: UNICAST_MODE

  slave_lswith:
    type: cloudify.nsx.lswitch
    properties:
      nsx_auth: *nsx_auth
      switch:
        name: platform_test_slave_swith_name
        transport_zone: Main_Zone
        # UNICAST_MODE, MULTYCAST_MODE, HYBRID_MODE
        mode: UNICAST_MODE

  vresourcepool:
    type: cloudify.vcenter.resource_pool
    properties:
      vcenter_auth: &vcenter_auth
        username: { get_input: vcenter_user }
        password: { get_input: vcenter_password }
        host: { get_input: vcenter_ip }
      use_external_resource: true
      resource_pool:
        name: { get_input: vcenter_vresourcepool }

  datastore:
    type: cloudify.vcenter.datastore
    properties:
      vcenter_auth: *vcenter_auth
      use_external_resource: true
      datastore:
        name: { get_input: vcenter_datastore }

  datacenter:
    type: cloudify.vcenter.datacenter
    properties:
      vcenter_auth: *vcenter_auth
      use_external_resource: true
      datacenter:
        name: { get_input: vcenter_datacenter }

  nsx_dlr:
    type: cloudify.nsx.dlr
    properties:
      nsx_auth: *nsx_auth
      router:
        name: platform_test_some_router_name
        dlr_pwd: SeCrEt010203!
        # compact, large, quadlarge, xlarge
        dlr_size: compact
      firewall:
        # accept or deny
        action: accept
        # true or false
        logging: false
      dhcp:
        enabled: true
        syslog_enabled: false
        syslog_level: INFO
      routing:
        enabled: true
        routingGlobalConfig:
          routerId: 192.168.1.11
          logging:
            logLevel: info
            enable: false
          ecmp: false
        staticRouting:
          defaultRoute:
            # some address, will be replaced by default gateway
            gatewayAddress: 192.168.1.43
      ospf:
        enabled: true
        protocolAddress: 192.168.1.44
        forwardingAddress: 192.168.1.11
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            router:
              datacentermoid: { get_attribute: [ datacenter, resource_id ] }
              datastoremoid: { get_attribute: [ datastore, resource_id ] }
              resourcepoolid: { get_attribute: [ vresourcepool, resource_id ] }
              ha_ls_id: { get_attribute: [ master_lswith, resource_id ] }
              uplink_ls_id: { get_attribute: [ master_lswith, resource_id ] }
              uplink_ip: 192.168.1.11
              uplink_subnet: 255.255.255.0
              uplink_dgw: 192.168.1.1
    relationships:
      - type: cloudify.relationships.connected_to
        target: master_lswith
      - type: cloudify.relationships.connected_to
        target: vresourcepool
      - type: cloudify.relationships.connected_to
        target: datastore
      - type: cloudify.relationships.connected_to
        target: datacenter

  interface:
    type: cloudify.nsx.dlr_interface
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            interface:
              dlr_id: { get_attribute: [ nsx_dlr, resource_id ] }
              interface_ls_id: { get_attribute: [ slave_lswith, resource_id ] }
              interface_ip: 192.168.2.11
              interface_subnet: 255.255.255.0
              name: platform_test_some_platform_test_interface_name
    relationships:
      - type: cloudify.relationships.contained_in
        target: nsx_dlr
      - type: cloudify.relationships.connected_to
        target: slave_lswith

  ospf_areas:
    type: cloudify.nsx.ospf_areas
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            area:
              dlr_id: { get_attribute: [ nsx_dlr, resource_id ] }
              areaId: 1000
              type: nssa
              authentication:
                type: none
    relationships:
      - type: cloudify.relationships.contained_in
        target: nsx_dlr
      - type: cloudify.relationships.connected_to
        target: interface

  ospf_interface:
    type: cloudify.nsx.ospf_interfaces
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            interface:
              dlr_id: { get_attribute: [ nsx_dlr, resource_id ] }
              vnic: { get_attribute: [ nsx_dlr, router, uplink_vnic ] }
              areaId: { get_attribute: [ ospf_areas, area, areaId ] }
              helloInterval: 10
              priority: 128
              cost: 1
              deadInterval: 40
              mtuIgnore: false
    relationships:
      - type: cloudify.relationships.connected_to
        target: ospf_areas
      - type: cloudify.relationships.connected_to
        target: interface

  dlr_static_gateway:
    type: cloudify.nsx.dlr_dgw
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            gateway:
              dlr_id: { get_attribute: [ nsx_dlr, resource_id ] }
              address: 192.168.1.12
    relationships:
      - type: cloudify.relationships.contained_in
        target: nsx_dlr

  dhcp_relay:
    type: cloudify.nsx.dlr_dhcp_relay
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            relay:
              dlr_id: { get_attribute: [ nsx_dlr, resource_id ] }
              relayServer:
                ipAddress: 8.8.8.8
              relayAgents:
                relayAgent:
                  vnicIndex: { get_attribute: [ interface, resource_id ] }
                  giAddress: { get_attribute: [ interface, interface, interface_ip ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: nsx_dlr
      - type: cloudify.relationships.connected_to
        target: interface

  dvportgroup:
    type: cloudify.vcenter.dvportgroup
    properties:
      vcenter_auth: *vcenter_auth
      use_external_resource: true
      update_to:
        name: { get_property: [ slave_lswith, switch, name ] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            resource_id: { get_attribute: [ slave_lswith, resource_dvportgroup_id ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: slave_lswith

outputs:
  network:
    description: real network name
    value: { get_attribute: [ dvportgroup, resource_name ] }
