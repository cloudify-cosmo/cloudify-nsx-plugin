tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
#  - https://raw.githubusercontent.com/Cloudify-PS/cloudify-nsx-plugin/master/plugin.yaml
  - ../plugin.yaml

inputs:

  nsx_ip:
    type: string
    description: >
       nsx server ip
    default: 127.0.0.1

  nsx_user:
    type: string
    description: >
       nsx server user
    default: nsx

  nsx_password:
    type: string
    description: >
       nsx server user password
    default: nsx

  nsx_raml:
    type: string
    description: >
       raml file path
    default: ""

  vcenter_ip:
    type: string
    description: >
       vcenter server ip
    default: 127.0.0.1

  vcenter_user:
    type: string
    description: >
       vcenter server user
    default: nsx

  vcenter_password:
    type: string
    description: >
       vcenter server user password
    default: nsx

  vcenter_vresourcepool:
    type: string
    description: >
       vcenter resourcepool
    default: Cluster

  vcenter_datastore:
    type: string
    description: >
       vcenter datastore
    default: datastore1

  vcenter_datacenter:
    type: string
    description: >
       vcenter datacenter
    default: Datacenter

node_templates:

  slave_security_group:
    type: cloudify.nsx.security_group
    properties:
      nsx_auth: &nsx_auth
        username: { get_input: nsx_user }
        password: { get_input: nsx_password }
        host: { get_input: nsx_ip }
        raml: { get_input: nsx_raml }
      group:
        scopeId: globalroot-0
        name: platform_test_SlaveSecureGroup

  slave_exclude_security_group:
    type: cloudify.nsx.security_group
    properties:
      nsx_auth: *nsx_auth
      group:
        scopeId: globalroot-0
        name: platform_test_SlaveExcludeSecureGroup

  master_security_group:
    type: cloudify.nsx.security_group
    properties:
      nsx_auth: *nsx_auth
      group:
        scopeId: globalroot-0
        name: platform_test_MasterSecureGroup

  slave_master_security_group_bind:
    type: cloudify.nsx.security_group_member
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            group_member:
              security_group_id: { get_attribute: [ master_security_group, resource_id ] }
              objectId: { get_attribute: [ slave_security_group, resource_id ] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: master_security_group
      - type: cloudify.relationships.connected_to
        target: slave_security_group

  update_dynamic_members:
    type: cloudify.nsx.security_group_dynamic_member
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            dynamic_member:
              security_group_id: { get_attribute: [ slave_security_group, resource_id ] }
              dynamic_set:
                - operator: OR
                  dynamicCriteria:
                    operator: AND
                    isValid: true
                    key: VM.GUEST_OS_FULL_NAME
                    value: Server
                    criteria: contains
                - operator: OR
                  dynamicCriteria:
                    operator: AND
                    isValid: true
                    key: VM.GUEST_OS_FULL_NAME
                    value: Teapot
                    criteria: contains
    relationships:
      - type: cloudify.relationships.connected_to
        target: slave_security_group

  slave_exclude_master_security_group_bind:
    type: cloudify.nsx.security_group_exclude_member
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            group_exclude_member:
              security_group_id: { get_attribute: [ master_security_group, resource_id ] }
              objectId: { get_attribute: [ slave_exclude_security_group, resource_id ] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: slave_master_security_group_bind
      - type: cloudify.relationships.connected_to
        target: slave_exclude_security_group

  security_tag:
    type: cloudify.nsx.security_tag
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            tag:
              name: platform_test_secret_tag
              description: What can i say?

  root_security_group:
    type: cloudify.nsx.security_group
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            group:
              scopeId: globalroot-0
              name: platform_test_RootSecureGroup
              member:
                objectId: { get_attribute: [ master_security_group, resource_id ] }
              dynamicMemberDefinition:
                dynamicSet:
                  - operator: OR
                    dynamicCriteria:
                      operator: OR
                      isValid: true
                      key: VM.GUEST_HOST_NAME
                      value: linux
                      criteria: contains
                  - operator: OR
                    dynamicCriteria:
                      operator: OR
                      isValid: true
                      key: VM.SECURITY_TAG
                      value: { get_attribute: [ security_tag, tag, name ] }
                      criteria: contains
    relationships:
      - type: cloudify.relationships.connected_to
        target: master_security_group
      - type: cloudify.relationships.connected_to
        target: security_tag

  master_security_policy:
    type: cloudify.nsx.security_policy
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            policy:
              name: platform_test_MasterPolicy
              description: MasterPolicy
              precedence: 100
              actionsByCategory:
                category: firewall
                action:
                  '@class': firewallSecurityAction
                  name: platform_test_name
                  description: description
                  category: firewall
                  secondarySecurityGroup:
                    objectId: { get_attribute: [ master_security_group, resource_id ] }
                  action: allow
                  direction: inbound
    relationships:
      - type: cloudify.relationships.connected_to
        target: master_security_group

  master_security_policy_bind:
    type: cloudify.nsx.security_policy_group_bind
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            policy_group_bind:
              security_policy_id: { get_attribute: [ master_security_policy, resource_id ] }
              security_group_id: { get_attribute: [ slave_security_group, resource_id ] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: slave_security_group
      - type: cloudify.relationships.connected_to
        target: master_security_policy

  master_security_policy_section:
    type: cloudify.nsx.security_policy_section
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            policy_section:
              security_policy_id: { get_attribute: [ master_security_policy, resource_id ] }
              category: endpoint
              action:
                '@class': endpointSecurityAction
                name: platform_test_endpoint_check
                actionType: DATA_SECURITY
                description: description for DATA_SECURITY
                isEnabled: "true"
                isActionEnforced: "false"
                category: endpoint
                isActive: "true"
    relationships:
      - type: cloudify.relationships.depends_on
        target: master_security_policy_bind
      - type: cloudify.relationships.connected_to
        target: master_security_policy

  vm:
    type: cloudify.vcenter.server
    properties:
      vcenter_auth: &vcenter_auth
        username: { get_input: vcenter_user }
        password: { get_input: vcenter_password }
        host: { get_input: vcenter_ip }
      use_external_resource: true
      server:
        name: LabsTest

  tag_vm:
    type: cloudify.nsx.security_tag_vm
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            vm_tag:
              tag_id: { get_attribute: [ security_tag, resource_id ] }
              vm_id: { get_attribute: [ vm, resource_id ] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: security_tag
      - type: cloudify.relationships.connected_to
        target: vm

  security_group_member_vm:
    type: cloudify.nsx.security_group_member
    properties:
      nsx_auth: *nsx_auth
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            group_member:
              security_group_id: { get_attribute: [ root_security_group, resource_id ] }
              objectId: { get_attribute: [ vm, resource_id ] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: root_security_group
      - type: cloudify.relationships.connected_to
        target: vm
