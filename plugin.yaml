plugins:
  nsx:
    executor: central_deployment_agent
    # source: https://github.com/Cloudify-PS/cloudify-nsx-plugin/archive/master.zip
    package_name: cloudify-nsx-plugin
    package_version: '0.1'

data_types:

  vcenter_auth_type:
    properties:
      username:
        default: administrator@vsphere.local
        required: true
      password:
        default: vcenter
        required: true
      host:
        default: vcenter.local
        required: true

  nsx_auth_type:
    properties:
      username:
        default: administrator@vsphere.local
        required: true
      password:
        default: vcenter
        required: true
      host:
        default: vcenter.local
        required: true
      raml:
        default: https://raw.githubusercontent.com/vmware/pynsxv/master/pynsxv/library/api_spec/nsxvapi.raml
        required: true

node_types:

  # vcenter resource pool
  cloudify.vcenter.resource_pool:
    derived_from: cloudify.nodes.Root
    properties:
      vcenter_auth:
        type: vcenter_auth_type
      resource_pool:
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_vcenter_resource_pool.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_vcenter_resource_pool.delete

  # vcenter datastore
  cloudify.vcenter.datastore:
    derived_from: cloudify.nodes.Root
    properties:
      vcenter_auth:
        type: vcenter_auth_type
      datastore:
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_vcenter_datastore.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_vcenter_datastore.delete

  # vcenter datacenter
  cloudify.vcenter.datacenter:
    derived_from: cloudify.nodes.Root
    properties:
      vcenter_auth:
        type: vcenter_auth_type
      datacenter:
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_vcenter_datacenter.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_vcenter_datacenter.delete

  # vcenter datacenter
  cloudify.vcenter.dvportgroup:
    derived_from: cloudify.nodes.Root
    properties:
      vcenter_auth:
        type: vcenter_auth_type
      dvportgroup:
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_vcenter_dvportgroup.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_vcenter_dvportgroup.delete

  # logical switches
  cloudify.nsx.lswitch:
    derived_from: cloudify.nodes.Root
    properties:
      nsx_auth:
        type: nsx_auth_type
      switch:
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_lswitch.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_lswitch.delete

  # distributed logical routers
  cloudify.nsx.dlr:
    derived_from: cloudify.nodes.Root
    properties:
      nsx_auth:
        type: nsx_auth_type
      router:
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_dlr.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_dlr.delete

  # distributed logical routers interface
  cloudify.nsx.dlr_interface:
    derived_from: cloudify.nodes.Root
    properties:
      nsx_auth:
        type: nsx_auth_type
      interface:
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_dlr_interface.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_dlr_interface.delete

  # distributed logical routers gateway
  cloudify.nsx.dlr_dgw:
    derived_from: cloudify.nodes.Root
    properties:
      nsx_auth:
        type: nsx_auth_type
      gateway:
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_dlr_dgw.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_dlr_dgw.delete

  # edge services gateways
  cloudify.nsx.esg:
    derived_from: cloudify.nodes.Root
    properties:
      nsx_auth:
        type: nsx_auth_type
      edge:
        default: {}
      firewall:
        default:
          # accept or deny
          action: accept
          # true or false
          logging: false
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_esg.create
          inputs: {}
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_esg.delete
          inputs: {}

  # edge services gateways interfaces
  cloudify.nsx.esg_interface:
    derived_from: cloudify.nodes.Root
    properties:
      nsx_auth:
        type: nsx_auth_type
      interface:
        default:
          # The name of the ESG to configure interfaces on
          esg_name: {}
          # The vnic index, e.g. vnic3 and the index 3
          ifindex: {}
          # (Optional) The primary IP Address to be configured for this interface
          ipaddr: {}
          # (Optional) The netmask in the x.x.x.x format
          netmask: {}
          # (Optional) The prefix length, this takes precedence over the netmask
          prefixlen: {}
          # (Optional) The name assigned to the vnic
          name: {}
          # (Optional) The vnic MTU
          mtu: {}
          # (Optional) The vnic connection state (true/false)
          is_connected: ""
          # (Optional) The portgroup id of logical switch id to connenct this vnic to
          portgroup_id: ""
          # (Optional) The vnic type (uplink/internal)
          vnic_type: ""
          # (Optional) Whether the interface will send icmp redirects (true/false)
          enable_send_redirects: ""
          # (Optional) Whether the interface will do proxy arp (true/false)
          enable_proxy_arp: ""
          # (Optional) A list of additional secondary IP addresses in the primary IP's Subnet
          secondary_ips: ""
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_esg_interface.create
          inputs: {}
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_esg_interface.delete
          inputs: {}

  # edge services gateways interfaces
  cloudify.nsx.esg_gateway:
    derived_from: cloudify.nodes.Root
    properties:
      nsx_auth:
        type: nsx_auth_type
      gateway:
        default:
          # The name of the ESG to list interfaces of
          esg_name: {}
          # The default gateway ip (next hop)
          dgw_ip: {}
          # (Optional) The vnic index of were the default gateway is reachable on
          vnic: {}
          # (Optional) The MTU of the defautl gateway (default=1500)
          mtu: {}
          # (OIptional) Admin distance of the defautl route (default=1)
          admin_distance: {}

    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_esg_gateway.create
          inputs: {}
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_esg_gateway.delete
          inputs: {}

  # edge services gateways route
  cloudify.nsx.esg_route:
    derived_from: cloudify.nodes.Root

    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_stub.create
          inputs: {}
        delete:
          implementation: nsx.cloudify_nsx.cfy_stub.delete
          inputs: {}

  # Edge DHCP
  cloudify.nsx.dhcp:
    derived_from: cloudify.nodes.Root

    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_stub.create
          inputs: {}
        delete:
          implementation: nsx.cloudify_nsx.cfy_stub.delete
          inputs: {}

  # Edge DHCP pool
  cloudify.nsx.dhcp_pool:
    derived_from: cloudify.nodes.Root

    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_stub.create
          inputs: {}
        delete:
          implementation: nsx.cloudify_nsx.cfy_stub.delete
          inputs: {}

  # Edge DHCP binding
  cloudify.nsx.dhcp_binding:
    derived_from: cloudify.nodes.Root

    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_stub.create
          inputs: {}
        delete:
          implementation: nsx.cloudify_nsx.cfy_stub.delete
          inputs: {}

  # distributed firewall
  cloudify.nsx.dfw_section:
    derived_from: cloudify.nodes.Root

    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_stub.create
          inputs: {}
        delete:
          implementation: nsx.cloudify_nsx.cfy_stub.delete
          inputs: {}

  # distributed firewall
  cloudify.nsx.dfw_rule:
    derived_from: cloudify.nodes.Root

    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_stub.create
          inputs: {}
        delete:
          implementation: nsx.cloudify_nsx.cfy_stub.delete
          inputs: {}
