plugins:
  nsx:
    executor: central_deployment_agent
    # source: https://github.com/Cloudify-PS/cloudify-nsx-plugin/archive/master.zip
    package_name: cloudify-nsx-plugin
    package_version: '0.1'

data_types:

  vcenter_auth_type:
    properties:
      username:
        default: administrator@vsphere.local
        required: true
      password:
        default: vcenter
        required: true
      host:
        default: vcenter.local
        required: true

  nsx_auth_type:
    properties:
      username:
        default: administrator@vsphere.local
        required: true
      password:
        default: vcenter
        required: true
      host:
        default: vcenter.local
        required: true
      raml:
        default: https://raw.githubusercontent.com/vmware/pynsxv/master/pynsxv/library/api_spec/nsxvapi.raml
        required: true

node_types:

  # vcenter resource pool
  cloudify.vcenter.resource_pool:
    derived_from: cloudify.nodes.ObjectStorage
    properties:
      vcenter_auth:
        type: vcenter_auth_type
      resource_pool:
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_vcenter_resource_pool.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_vcenter_resource_pool.delete

  # vcenter datastore
  cloudify.vcenter.datastore:
    derived_from: cloudify.nodes.ObjectStorage
    properties:
      vcenter_auth:
        type: vcenter_auth_type
      datastore:
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_vcenter_datastore.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_vcenter_datastore.delete

  # vcenter datacenter
  cloudify.vcenter.datacenter:
    derived_from: cloudify.nodes.Tier
    properties:
      vcenter_auth:
        type: vcenter_auth_type
      datacenter:
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_vcenter_datacenter.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_vcenter_datacenter.delete

  # vcenter datacenter
  cloudify.vcenter.dvportgroup:
    derived_from: cloudify.nodes.Subnet
    properties:
      vcenter_auth:
        type: vcenter_auth_type
      dvportgroup:
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_vcenter_dvportgroup.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_vcenter_dvportgroup.delete

  # logical switches
  cloudify.nsx.lswitch:
    derived_from: cloudify.nodes.Network
    properties:
      nsx_auth:
        type: nsx_auth_type
      switch:
        default:
          # The name of the Scope (Transport Zone)
          transport_zone: {}
          # The name that will be assigned to the new logical switch
          name: {}
          # (Optional) Control Plane Mode, uses the Transport Zone default if not specified
          mode: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_lswitch.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_lswitch.delete

  # distributed logical routers
  cloudify.nsx.dlr:
    derived_from: cloudify.nodes.Router
    properties:
      nsx_auth:
        type: nsx_auth_type
      router:
        default:
          # The name that will be assigned to the new dlr
          name: {}
          # The admin password of new dlr
          dlr_pwd: {}
          # The DLR Control VM size
          dlr_size: {}
          # The vCenter DataCenter ID where dlr control vm will be deployed
          datacentermoid: {}
          # The vCenter datastore ID where dlr control vm will be deployed
          datastoremoid: {}
          # The vCenter Cluster where dlr control vm will be deployed
          resourcepoolid: {}
          # New dlr ha logical switch id or vds port group
          ha_ls_id: {}
          # New dlr uplink logical switch id or vds port group
          uplink_ls_id: {}
          # New dlr uplink ip@
          uplink_ip: {}
          # New dlr uplink subnet
          uplink_subnet: {}
          # New dlr default gateway
          uplink_dgw: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_dlr.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_dlr.delete

  # distributed logical routers interface
  cloudify.nsx.dlr_interface:
    derived_from: cloudify.nodes.Port
    properties:
      nsx_auth:
        type: nsx_auth_type
      interface:
        default:
          # dlr uuid
          dlr_id: {}
          # new interface logical switch
          interface_ls_id: {}
          # new interface ip address
          interface_ip: {}
          # new interface subnet
          interface_subnet: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_dlr_interface.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_dlr_interface.delete

  # distributed logical routers gateway
  cloudify.nsx.dlr_dgw:
    derived_from: cloudify.nodes.SecurityGroup
    properties:
      nsx_auth:
        type: nsx_auth_type
      gateway:
        default:
          # default gateway ip address
          uplink_dgw: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_dlr_dgw.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_dlr_dgw.delete

  # edge services gateways
  cloudify.nsx.esg:
    derived_from: cloudify.nodes.Router
    properties:
      nsx_auth:
        type: nsx_auth_type
      edge:
        default:
          # The name of the ESG to be created
          name: {}
          # The CLI password of the ESG
          esg_pwd: {}
          # The size of the ESG, options are compact, large, quadlarge, xlarge
          esg_size: compact
          # The managed object id of the vCenter DC Object to deploy the ESG in
          datacentermoid: {}
          # The managed object id of the vCenter Datastore Object to deploy the ESG in
          datastoremoid: {}
          # The managed object id of the vCenter Cluster or RP Object to deploy the ESG in
          resourcepoolid: {}
          # The managed object id of the port group for the first vnic (on creation
          # the first vnic must be connected to a valid portgroup in NSX)
          default_pg: {}
          # The Username for the CLI and SSH access (default: admin)
          esg_username: admin
          # Enables / Disables SSH access to the Edge Host (default: False)
          esg_remote_access: false
      firewall:
        default:
          # accept or deny
          action: accept
          # true or false
          logging: false
      dhcp:
        default:
          # The display name of a Edge Service Gateway used for DHCP
          esg_name: {}
          # True/False The desired state of the DHCP Server
          enabled: true
          # ('true'/'false') The desired logging state of the DHCP Server
          syslog_enabled: false
          # The logging level for DHCP on this Edge (INFO/WARNING/etc.)
          syslog_level: INFO
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_esg.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_esg.delete

  # edge services gateways interfaces
  cloudify.nsx.esg_interface:
    derived_from: cloudify.nodes.Port
    properties:
      nsx_auth:
        type: nsx_auth_type
      interface:
        default:
          # The name of the ESG to configure interfaces on
          esg_name: {}
          # The vnic index, e.g. vnic3 and the index 3
          ifindex: {}
          # (Optional) The primary IP Address to be configured for this interface
          ipaddr: {}
          # (Optional) The netmask in the x.x.x.x format
          netmask: {}
          # (Optional) The prefix length, this takes precedence over the netmask
          prefixlen: {}
          # (Optional) The name assigned to the vnic
          name: {}
          # (Optional) The vnic MTU
          mtu: 1500
          # (Optional) The vnic connection state (true/false)
          is_connected: ""
          # (Optional) The portgroup id of logical switch id to connenct this vnic to
          portgroup_id: ""
          # (Optional) The vnic type (uplink/internal)
          vnic_type: ""
          # (Optional) Whether the interface will send icmp redirects (true/false)
          enable_send_redirects: ""
          # (Optional) Whether the interface will do proxy arp (true/false)
          enable_proxy_arp: ""
          # (Optional) A list of additional secondary IP addresses in the primary IP's Subnet
          secondary_ips: ""
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_esg_interface.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_esg_interface.delete

  # edge services gateways interfaces
  cloudify.nsx.esg_gateway:
    derived_from: cloudify.nodes.SecurityGroup
    properties:
      nsx_auth:
        type: nsx_auth_type
      gateway:
        default:
          # The name of the ESG to list interfaces of
          esg_name: {}
          # The default gateway ip (next hop)
          dgw_ip: {}
          # (Optional) The vnic index of were the default gateway is reachable on
          vnic: {}
          # (Optional) The MTU of the defautl gateway (default=1500)
          mtu: 1500
          # (OIptional) Admin distance of the defautl route (default=1)
          admin_distance: 1
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_esg_gateway.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_esg_gateway.delete

  # edge services gateways route
  cloudify.nsx.esg_route:
    derived_from: cloudify.nodes.SecurityGroup
    properties:
      nsx_auth:
        type: nsx_auth_type
      route:
        default:
          # The name of the ESG where the route should be added
          esg_name: {}
          # The routes network in the x.x.x.x/yy format, e.g. 192.168.1.0/24
          network: {}
          # The next hop ip
          next_hop: {}
          # (Optional) The vnic index of were this route is reachable on
          vnic: {}
          # (Optional) The MTU of the route (default=1500)
          mtu: 1500
          # (Optional) Admin distance of the defautl route (default=1)
          admin_distance: 1
          # (Optional) A description for this route
          description: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_esg_route.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_esg_route.delete

  # Edge DHCP pool
  cloudify.nsx.dhcp_pool:
    derived_from: cloudify.nodes.ApplicationServer
    properties:
      nsx_auth:
        type: nsx_auth_type
      pool:
        default:
          # The display name of a Edge Service Gateway used for DHCP
          esg_name: {}
          # An IP range, e.g. 192.168.178.10-192.168.178.100 for this IP Pool
          ip_range: {}
          # The default gateway for the specified subnet
          default_gateway: {}
          # The subnet mask (e.g. 255.255.255.0) for the specified subnet
          subnet_mask: {}
          # The DNS domain name (e.g. vmware.com) for the specified subnet
          domain_name: {}
          # The primary DNS Server
          dns_server_1: {}
          # The secondary DNS Server
          dns_server_2: {}
          # The lease time in seconds, use 'infinite' to disable expiry of DHCP leases
          lease_time: infinite
          # ('true'/'false') If set to true, the DNS servers and domain name set for NSX-Manager will be used
          auto_dns: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_dhcp_pool.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_dhcp_pool.delete

  # Edge DHCP binding
  cloudify.nsx.dhcp_binding:
    derived_from: cloudify.nodes.ApplicationModule
    properties:
      nsx_auth:
        type: nsx_auth_type
      bind:
        default:
          # The display name of a Edge Service Gateway used for DHCP
          esg_name: {}
          # (Optional, case vm_id/vnic_id) The VM managed object Id in vCenter for the VM to be attached to this binding entry
          vm_id: {}
          # (Optional, case vm_id/vnic_id) The vnic index for the VM interface attached to this binding entry (e.g. vnic0 has index 0)
          vnic_id: {}
          # (Optional, case without vm_id/vnic_id) The MAC Address of the static binding
          mac: {}
          # The hostname for this static binding
          hostname: {}
          # The IP Address for this static binding
          ip: {}
          # The default gateway for the specified binding
          default_gateway: {}
          # The subnet mask (e.g. 255.255.255.0) for the specified binding
          subnet_mask: {}
          # The DNS domain name (e.g. vmware.com) for the specified binding
          domain_name: {}
          # The primary DNS Server
          dns_server_1: {}
          # The secondary DNS Server
          dns_server_2: {}
          # The lease time in seconds, use 'infinite' to disable expiry of DHCP leases
          lease_time: infinite
          # ('true'/'false') If set to true, the DNS servers and domain name set for NSX-Manager will be used
          auto_dns: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_nsx_dhcp_bind.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_nsx_dhcp_bind.delete

  # distributed firewall
  cloudify.nsx.dfw_section:
    derived_from: cloudify.nodes.SecurityGroup
    properties:
      nsx_auth:
        type: nsx_auth_type
      section:
        default:
          # The name of the dfw section to be created
          name: {}
          # The type of the section. Allowed values are L2/L3/L3R
          type: L3R
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_stub.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_stub.delete

  # distributed firewall
  cloudify.nsx.dfw_rule:
    derived_from: cloudify.nodes.SecurityGroup
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_stub.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_stub.delete

  # Load Balancer Application profile to an ESG
  cloudify.nsx.lb_app_profile:
    derived_from: cloudify.nodes.LoadBalancer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_stub.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_stub.delete

  # Member inside a Server Pool on an ESG
  cloudify.nsx.lb_member:
    derived_from: cloudify.nodes.LoadBalancer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_stub.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_stub.delete

  # Load Balancing Monitor on an ESG
  cloudify.nsx.lb_monitor:
    derived_from: cloudify.nodes.LoadBalancer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_stub.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_stub.delete

  # a Load Balancing Server Pool on an ESG
  cloudify.nsx.lb_pool:
    derived_from: cloudify.nodes.LoadBalancer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_stub.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_stub.delete

  # a Load Balancing Virtual IP / Virtual Server (VIP) on an ESG
  cloudify.nsx.lb_vip:
    derived_from: cloudify.nodes.LoadBalancer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx.cloudify_nsx.cfy_stub.create
        delete:
          implementation: nsx.cloudify_nsx.cfy_stub.delete
